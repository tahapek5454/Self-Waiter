// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SelfWaiter.DealerAPI.Infrastructure.Persistence.DbContexts.EfCoreContext;

#nullable disable

namespace SelfWaiter.DealerAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250125110628_mig-7")]
    partial class mig7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsValid")
                        .IsDescending();

                    b.HasIndex("Name", "IsValid")
                        .IsUnique()
                        .IsDescending();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7333d5e7-ae6a-4523-88ac-7383c9a9f6a5"),
                            CountryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsValid = true,
                            Name = "Sakarya"
                        });
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsValid")
                        .IsDescending();

                    b.HasIndex("Name", "IsValid")
                        .IsUnique()
                        .IsDescending();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsValid = true,
                            Name = "Türkiye"
                        });
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatetorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IsValid")
                        .IsDescending();

                    b.HasIndex("Name", "IsValid")
                        .IsUnique()
                        .IsDescending();

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24818128-6c4e-453d-8a1f-15f75e8aa746"),
                            CityId = new Guid("7333d5e7-ae6a-4523-88ac-7383c9a9f6a5"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsValid = true,
                            Name = "Serdivan"
                        });
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatetorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsValid")
                        .IsDescending();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d9b274f-753f-4aab-947d-cbf9d232b811"),
                            CreatedDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatorUserName = "taha.pek",
                            Email = "taha_test@gmail.com",
                            IsValid = true,
                            Name = "Taha",
                            Surname = "Pek",
                            UserName = "taha.pek"
                        });
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfileAndDealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatetorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileAndDealers");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.City", b =>
                {
                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.Dealer", b =>
                {
                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfile", "CreatorUser")
                        .WithMany("CreatedDealers")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.District", "District")
                        .WithMany("Dealers")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("District");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.District", b =>
                {
                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfileAndDealer", b =>
                {
                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.Dealer", "Dealer")
                        .WithMany("UserProfileAndDealers")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("UserProfileAndDealers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealer");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.Dealer", b =>
                {
                    b.Navigation("UserProfileAndDealers");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.District", b =>
                {
                    b.Navigation("Dealers");
                });

            modelBuilder.Entity("SelfWaiter.DealerAPI.Core.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("CreatedDealers");

                    b.Navigation("UserProfileAndDealers");
                });
#pragma warning restore 612, 618
        }
    }
}
